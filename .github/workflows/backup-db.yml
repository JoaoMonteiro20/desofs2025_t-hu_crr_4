name: Scheduled DB Backup

on:
  push:
    branches: [ resolve-dast ]
  schedule:
    - cron: '0 3 * * 0'  
  workflow_dispatch:

jobs:
  db-backup:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - 1433:1433
        env:
          SA_PASSWORD: "YourStrong!Passw0rd"
          ACCEPT_EULA: "Y"

    steps:
      - name: Esperar 20s para SQL arrancar
        run: sleep 20

      - name: Verificar alterações na BD (usando container tools)
        uses: docker://mcr.microsoft.com/mssql-tools
        with:
          entrypoint: /bin/bash
          args: -c "/opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P 'YourStrong!Passw0rd' -Q \"IF EXISTS (SELECT 1 FROM ChangesLog WHERE Date >= DATEADD(DAY, -7, GETDATE())) PRINT 'yes' ELSE PRINT 'no'\" > /github/workspace/result.txt"

      - name: Processar resultado
        run: |
          VALUE=$(tail -n 1 result.txt | tr -d '\r')
          echo "CHANGES_FOUND=$VALUE"
          echo "CHANGES_FOUND=$VALUE" >> $GITHUB_ENV

      - name: Criar pasta de backup
        if: env.CHANGES_FOUND == 'yes'
        run: mkdir -p sql-backup

      - name: Executar backup
        if: env.CHANGES_FOUND == 'yes'
        run: |
          docker exec $(docker ps -q -f ancestor=mcr.microsoft.com/mssql/server:2022-latest) \
            /opt/mssql-tools/bin/sqlcmd \
            -S localhost -U sa -P "YourStrong!Passw0rd" \
            -Q "BACKUP DATABASE EcoImpactDB TO DISK = '/var/opt/mssql/backup/ecoimpact.bak'"

      - name: Copiar ficheiro de backup do container
        if: env.CHANGES_FOUND == 'yes'
        run: |
          docker cp $(docker ps -q -f ancestor=mcr.microsoft.com/mssql/server:2022-latest):/var/opt/mssql/backup/ecoimpact.bak ./sql-backup/

      - name: Guardar artefacto do backup
        if: env.CHANGES_FOUND == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: ecoimpact-db-backup
          path: ./sql-backup/ecoimpact.bak
