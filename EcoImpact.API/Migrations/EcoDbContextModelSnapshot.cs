// <auto-generated />
using System;
using EcoImpact.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoImpact.API.Migrations
{
    [DbContext(typeof(EcoDbContext))]
    partial class EcoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoImpact.DataModel.Models.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuditLogId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.FootprintSummary", b =>
                {
                    b.Property<Guid>("FootprintSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("PeriodEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PeriodStart")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalFootprint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FootprintSummaryId");

                    b.HasIndex("UserId");

                    b.ToTable("FootprintSummaries");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.HabitType", b =>
                {
                    b.Property<Guid>("HabitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HabitTypeId");

                    b.ToTable("HabitTypes");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.UserChoice", b =>
                {
                    b.Property<Guid>("UserChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Footprint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("HabitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserChoiceId");

                    b.HasIndex("HabitTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChoices");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.AuditLog", b =>
                {
                    b.HasOne("EcoImpact.DataModel.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.FootprintSummary", b =>
                {
                    b.HasOne("EcoImpact.DataModel.Models.User", "User")
                        .WithMany("Summaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.UserChoice", b =>
                {
                    b.HasOne("EcoImpact.DataModel.Models.HabitType", "HabitType")
                        .WithMany("UserChoices")
                        .HasForeignKey("HabitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoImpact.DataModel.Models.User", "User")
                        .WithMany("UserChoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HabitType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.HabitType", b =>
                {
                    b.Navigation("UserChoices");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Summaries");

                    b.Navigation("UserChoices");
                });
#pragma warning restore 612, 618
        }
    }
}
