// <auto-generated />
using System;
using EcoImpact.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EcoImpact.API.Migrations
{
    [DbContext(typeof(EcoDbContext))]
    partial class EcoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EcoImpact.DataModel.Models.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AuditLogId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.FootprintSummary", b =>
                {
                    b.Property<Guid>("FootprintSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GeneratedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("PeriodEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PeriodStart")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalFootprint")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("FootprintSummaryId");

                    b.HasIndex("UserId");

                    b.ToTable("FootprintSummaries");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.HabitType", b =>
                {
                    b.Property<Guid>("HabitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<decimal>("Factor")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HabitTypeId");

                    b.ToTable("HabitTypes");

                    b.HasData(
                        new
                        {
                            HabitTypeId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Category = 0,
                            Factor = 0.192m,
                            Name = "Deslocação de carro (gasolina)",
                            Unit = "km"
                        },
                        new
                        {
                            HabitTypeId = new Guid("11111111-1111-1111-1111-111111111112"),
                            Category = 0,
                            Factor = 0.041m,
                            Name = "Viagem de comboio",
                            Unit = "km"
                        },
                        new
                        {
                            HabitTypeId = new Guid("11111111-1111-1111-1111-111111111113"),
                            Category = 0,
                            Factor = 0.255m,
                            Name = "Viagem de avião",
                            Unit = "km"
                        },
                        new
                        {
                            HabitTypeId = new Guid("22222222-2222-2222-2222-222222222221"),
                            Category = 1,
                            Factor = 5.0m,
                            Name = "Refeição com carne",
                            Unit = "unidade"
                        },
                        new
                        {
                            HabitTypeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Category = 1,
                            Factor = 2.0m,
                            Name = "Refeição vegetariana",
                            Unit = "unidade"
                        },
                        new
                        {
                            HabitTypeId = new Guid("22222222-2222-2222-2222-222222222223"),
                            Category = 1,
                            Factor = 1.5m,
                            Name = "Refeição vegan",
                            Unit = "unidade"
                        },
                        new
                        {
                            HabitTypeId = new Guid("33333333-3333-3333-3333-333333333331"),
                            Category = 2,
                            Factor = 0.233m,
                            Name = "Consumo de eletricidade",
                            Unit = "kWh"
                        },
                        new
                        {
                            HabitTypeId = new Guid("33333333-3333-3333-3333-333333333332"),
                            Category = 2,
                            Factor = 0.3m,
                            Name = "Banho quente (10 min)",
                            Unit = "minuto"
                        },
                        new
                        {
                            HabitTypeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Category = 2,
                            Factor = 1.2m,
                            Name = "Uso de aquecedor elétrico",
                            Unit = "hora"
                        });
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("EcoScore")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            EcoScore = 0m,
                            Email = "admin@ecoimpact.local",
                            FailedLoginAttempts = 0,
                            Password = "AQAAAAIAAYagAAAAEEISJn23wqjANxH/pmq3ug2f+MTVEF+p5yB7TORYNv6wFmeRVaTTL1G1objmD/A9Dg==",
                            Role = 0,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.UserChoice", b =>
                {
                    b.Property<Guid>("UserChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Footprint")
                        .HasColumnType("numeric");

                    b.Property<Guid>("HabitTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserChoiceId");

                    b.HasIndex("HabitTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChoices");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.AuditLog", b =>
                {
                    b.HasOne("EcoImpact.DataModel.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.FootprintSummary", b =>
                {
                    b.HasOne("EcoImpact.DataModel.Models.User", "User")
                        .WithMany("Summaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.UserChoice", b =>
                {
                    b.HasOne("EcoImpact.DataModel.Models.HabitType", "HabitType")
                        .WithMany("UserChoices")
                        .HasForeignKey("HabitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoImpact.DataModel.Models.User", "User")
                        .WithMany("UserChoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HabitType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.HabitType", b =>
                {
                    b.Navigation("UserChoices");
                });

            modelBuilder.Entity("EcoImpact.DataModel.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Summaries");

                    b.Navigation("UserChoices");
                });
#pragma warning restore 612, 618
        }
    }
}
